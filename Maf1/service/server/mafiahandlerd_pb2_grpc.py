# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mafiahandlerd_pb2 as mafiahandler__pb2
# service.server.

class EngineServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/EngineServer/Register',
                request_serializer=mafiahandler__pb2.RegQuery.SerializeToString,
                response_deserializer=mafiahandler__pb2.RegResponse.FromString,
                )
        self.UnRegister = channel.unary_unary(
                '/EngineServer/UnRegister',
                request_serializer=mafiahandler__pb2.UnRegQuery.SerializeToString,
                response_deserializer=mafiahandler__pb2.UnRegResponse.FromString,
                )
        self.Update = channel.unary_unary(
                '/EngineServer/Update',
                request_serializer=mafiahandler__pb2.StatusQuery.SerializeToString,
                response_deserializer=mafiahandler__pb2.StatusResponse.FromString,
                )
        self.Action = channel.unary_unary(
                '/EngineServer/Action',
                request_serializer=mafiahandler__pb2.ActionQuery.SerializeToString,
                response_deserializer=mafiahandler__pb2.ActionResponse.FromString,
                )
        self.ChatQueue = channel.unary_unary(
                '/EngineServer/ChatQueue',
                request_serializer=mafiahandler__pb2.ChatGetQueue.SerializeToString,
                response_deserializer=mafiahandler__pb2.ChatQueueResponse.FromString,
                )
        self.Chat = channel.unary_unary(
                '/EngineServer/Chat',
                request_serializer=mafiahandler__pb2.ChatMessage.SerializeToString,
                response_deserializer=mafiahandler__pb2.ChatResponse.FromString,
                )


class EngineServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Action(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatQueue(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EngineServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=mafiahandler__pb2.RegQuery.FromString,
                    response_serializer=mafiahandler__pb2.RegResponse.SerializeToString,
            ),
            'UnRegister': grpc.unary_unary_rpc_method_handler(
                    servicer.UnRegister,
                    request_deserializer=mafiahandler__pb2.UnRegQuery.FromString,
                    response_serializer=mafiahandler__pb2.UnRegResponse.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=mafiahandler__pb2.StatusQuery.FromString,
                    response_serializer=mafiahandler__pb2.StatusResponse.SerializeToString,
            ),
            'Action': grpc.unary_unary_rpc_method_handler(
                    servicer.Action,
                    request_deserializer=mafiahandler__pb2.ActionQuery.FromString,
                    response_serializer=mafiahandler__pb2.ActionResponse.SerializeToString,
            ),
            'ChatQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatQueue,
                    request_deserializer=mafiahandler__pb2.ChatGetQueue.FromString,
                    response_serializer=mafiahandler__pb2.ChatQueueResponse.SerializeToString,
            ),
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=mafiahandler__pb2.ChatMessage.FromString,
                    response_serializer=mafiahandler__pb2.ChatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EngineServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EngineServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineServer/Register',
            mafiahandler__pb2.RegQuery.SerializeToString,
            mafiahandler__pb2.RegResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnRegister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineServer/UnRegister',
            mafiahandler__pb2.UnRegQuery.SerializeToString,
            mafiahandler__pb2.UnRegResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineServer/Update',
            mafiahandler__pb2.StatusQuery.SerializeToString,
            mafiahandler__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Action(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineServer/Action',
            mafiahandler__pb2.ActionQuery.SerializeToString,
            mafiahandler__pb2.ActionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ChatQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineServer/ChatQueue',
            mafiahandler__pb2.ChatGetQueue.SerializeToString,
            mafiahandler__pb2.ChatQueueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EngineServer/Chat',
            mafiahandler__pb2.ChatMessage.SerializeToString,
            mafiahandler__pb2.ChatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
